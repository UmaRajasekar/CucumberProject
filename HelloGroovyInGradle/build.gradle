/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

defaultTasks 'hello3','hi','hello4'

import java. text.*

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

void printMessage( ){
    SimpleDateFormat sdf=new SimpleDateFormat( "yyyy-mm-dd")
	println "Hello World from function at "+  sdf.format(new Date())
}

printMessage( )

for (int j in [1,2,3]){
	println j
	}
	
[1,2,3].each{
	println it //it is shortcut for iterator
	}
	
def oneStepArgument(factor,closure){
	closure().each{
		println it*factor
		}
	return "success"
}

println oneStepArgument(3,{[10,20]})

def closurePassingCodeBlock(closure){
	closure()*2
}

def i=closurePassingCodeBlock{
	def y=3;
	y*2;
}

assert i==12 : "Value of i does not match with 12";

logger.info "The version of gradle is $gradle.gradleVersion "
logger.info "Gradle Home Directory: $gradle.gradleHomeDir "
logger.info "Gradle User Home Directory: $gradle.gradleUserHomeDir "

logger.info "Accessing project variable ${gradle.timestamp()}"


task hi

project.hi.doLast{
	println "Hi"
}

task hello{
	description = "Log of the task"
	group = "Welcome"
	
	doFirst{
		logger.info "My name is $name and this is my 2nd defined action"
	}
	
	doLast{
		logger.info "My name is $name and this is my 1st defined action"
	}
}

task hello2 (dependsOn: ['hello','hi']){
	description = "Log of the task"
	group = "Welcome"
	
	doFirst{
		logger.info "My name is $name and this is my 2nd defined action"
	}
	
	doLast{
		logger.info "My name is $name and this is my 1st defined action"
	}
}

task hello3(dependsOn: ['hello','hello2']){
	description = "Log of the task"
	group = "Welcome"
	
	doFirst{
		logger.info "My name is $name and this is my 2nd defined action"
	}
	
	doLast{
		logger.info "My name is $name and this is my 1st defined action"
	}
}

task hello4(dependsOn: project.getTasks().findAll{task -> task.name.startsWith('hello')}){
	description = "Log of the task"
	group = "Welcome"
	
	doFirst{
		logger.info "My name is $name and this is my 2nd defined action"
	}
	
	doLast{
		logger.info "My name is $name and this is my 1st defined action with version number as $project.version"
	}
}

task hello5{
	description = "Log of the task"
	group = "Welcome"
	
	doFirst{
		logger.info "My name is $name and this is my 2nd defined action"
	}
	
	doLast{
		logger.info "My name is $name and this is my 1st defined action"
	}
}

if(Math.random() < 0.5){
	hello4.dependsOn hello5, hi
}

logger.info hello.description
logger.info hello.group

logger.info ">>>> Task available starting with hello are ${project.getTasks().findAll{task -> task.name.startsWith('hello')}}"

project.gradle.taskGraph.whenReady{
	logger.info ">>>> Getting list of all tasks ${gradle.getTaskGraph().getAllTasks()}"
}

project.gradle.taskGraph.whenReady{ taskGraph ->
	if(taskGraph.hasTask(hello5)){
		project.version='1.0'
	}else{
		project.version='1.0-SNAPSHOT'
	}
}